{
    myfunc(func:has(type)){
        field1
        field2
        field3{
            subfield1
            subfield2
        }
    }
}
passno-N0416557 
node in dgraph 64 bit integer unsigned


mutate
{
    set{
        _:node1 <name> "Vinothsha" .
        _:node1 <age> "37" . 
    }
}
<name>--canonical form
query
{
    fetch(func:eq(name,"Vinothsha")){
        uid
        name
        age
    }
}--error

{
    fetch(func:eq(name,"Vinothsha")){
        uid
        name
        age
    }
}

mutate

{
    set{
        _:node1 <name> "kota" .
        _:node1 <age> "1000" .
    }
}

query
{
    fetch(func:has(name)){
        uid
        name
        age
    }
}

mutate
{
    set{
        <0x5><livestream><0x7>.
    }
}

query
{
myfunc(func:has(<livestream>)){
	uid
  name
  livestream
  age
}
}

query
{
myfunc(func:has(<livestream>)){
	uid
  name
  livestream{
		uid
    name
    age
  }
  age
}
}

mutate

{
    set{
        <0x5> <read> "richdad" .
    }
}


DATA TYPE	 AVAILABLE INDEX TYPES
int	            int
float	        float
string	        hash, exact, term, fulltext, trigram
bool	        bool
geo	            geo
dateTime	    year, month, day, hour


schema

<age>: int @index(int) .
<book.name>: string @index(hash) .
<dgraph.drop.op>: string .
<dgraph.graphql.p_query>: string @index(sha256) .
<dgraph.graphql.schema>: string .
<dgraph.graphql.xid>: string @index(exact) @upsert .
<livestream>: [uid] .
<name>: string @index(exact) .
<read>: [uid] .
type <book> {
	book.name
}
type <dgraph.graphql> {
	dgraph.graphql.schema
	dgraph.graphql.xid
}
type <dgraph.graphql.persisted_query> {
	dgraph.graphql.p_query
}
type <person> {
	name
	age
	read
	livestream
}


mutate

{
    set{
      _:node1 <book.name> "Dune" .
      _:node2 <book.name> "Three Body Problem" .
      <0x5> <read> _:node1 .
      <0x5> <read> _:node2 .
    }
}

query
{
myfunc(func:eq(name,"Vinothsha")){
	uid
  name
  age
  read{
		book.name
  }
  livestream{
	name
  }
read.book
}
}

mutate

{
  "set":[
	{
	"name":"sha",
  "age":41,
  "follows":[
	{
	"name":"billa",
  "age":28,
  "follows":[
	{
	"name":"jilla",
  "age":31
}
]
}
]
}
]
}

query
{
q(func:uid(0x21)){
  uid
	name
  age
  follows{
	name
    age
    follow{
			name
     
      age
    }
  }
}
}

update in Dgraph

{
  "set":[
	{
  "uid":"0x21",
	"name":"update or change",
  "age":20
}
]
}

Add new feild in dgraph

{
  "set":[
	{
  "uid":"0x21",
	"country":"India"
}
]
}

add following to other node 

{
	"set":[
	{
	"uid":"0x20",
  "follows":[
			{
			"uid":"0x20"
}
]
}
]
}

Recurse Query in Dgraph

*)Recurse queries let you traverse a set of predicates (with filter, facets, etc.) 
    until we reach all leaf nodes or we reach the maximum depth which is specified by the depth parameter.

*)You can specify only one level of predicates after root. 
    These would be traversed recursively. Both scalar and entity-nodes are treated similarly.

*)Only one recurse block is advised per query.

*)Be careful as the result size could explode quickly and an error would be returned if the result set gets too large.
    In such cases use more filters, limit results using pagination, or provide a depth parameter at root as shown in the example above.

*)The loop parameter can be set to false, in which case paths which lead to a loop would be ignored while traversing.

*)If not specified, the value of the loop parameter defaults to false.

*)If the value of the loop parameter is false and depth is not specified, 
    depth will default to math.MaxUint64, which means that the entire graph might be traversed until all the leaf nodes are reached.

https://github.com/dgraph-io/dgraph#dgraph-compared-to-other-graph-dbs